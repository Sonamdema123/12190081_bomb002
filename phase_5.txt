(gdb) b phase_5
Breakpoint 1 at 0x40107b
(gdb) b explode_bomb
Breakpoint 2 at 0x401438
(gdb) r
Starting program: /mnt/c/Users/Sonam Dema/Desktop/Assignment 1_2/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
48 4
So you got that one.  Try this one.
5 2

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi ;get input format
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt> ; call the input value that is 5, 2
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax          ;COMPARE 1 WITH THE VALUE OF %eax that is 2:
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48> ;SINCE 2 IS GREATER THAN 1 , IT  WILL ESCAPE THE EXPLODE BOMB
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) u * 0x0000000000401097
0x0000000000401097 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
=> 0x0000000000401097 <+28>:    mov    $0x4025b7,%esi  ;read the input format, we know that input value is two integer "%d %d"
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt> ;call the user input, in my case user input is 5,2
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax ;compare user input digit 2 and 1 
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48> ;Since 2 is greater than 1, it will escaped the EXPLODE_BOMB and jump to 48 address
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb> ;escaped the EXPLODE_BOMB
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) x/s 0x4025b7
0x4025b7:       "%d %d"

(gdb) i r
rax            0x2                 2
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee304      140737488282372
rsi            0x0                 0
rdi            0x7ffffffedcb0      140737488280752
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee410      140737488282640
r14            0x0                 0
r15            0x0                 0
rip            0x4010ab            0x4010ab <phase_5+48>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d  0x7ffffffee300 ;rsp address
0x7ffffffee300: 5
(gdb) u *0x00000000004010b4
0x00000000004010b4 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax ;rsp value 5 is move to %eax
   0x00000000004010ae <+51>:    and    $0xf,%eax   ; AND operation is performed and stored in %eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp) ; eax value is move to %rsp, rsp value get 5 again
=> 0x00000000004010b4 <+57>:    cmp    $0xf,%eax   ; Now immediate value 15 is compared with %eax value which eax = 5
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109> ;Since 15 is not equal to 5, it will escaped the EXPLODE_BOMB 
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.

(gdb) u *0x00000000004010d1
0x00000000004010d1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx ; 0 is moved to %ecx, ecx = 0
   0x00000000004010be <+67>:    mov    $0x0,%edx ; 0 is moved to %edx, edx = 0
   0x00000000004010c3 <+72>:    add    $0x1,%edx ; now %edx is incremented by 1, edx = 1
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax ;mov instruction is execute here
   0x00000000004010cf <+84>:    add    %eax,%ecx              ;%eax value is added to %ecx
=> 0x00000000004010d1 <+86>:    cmp    $0xf,%eax	      ;the value 15 is compared with to eax, where eax = 12
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>  ;since it is not equal, it will jumps to 72 instruction which is performed loop statement.
								So, loop is terminated when the value of eax is equal to 15.
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) i r
rax            0xc                 12
rbx            0x4021f0            4202992
rcx            0xc                 12
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7ffffffedcb0      140737488280752
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee410      140737488282640
r14            0x0                 0
r15            0x0                 0
rip            0x4010d1            0x4010d1 <phase_5+86>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u *0x00000000004010d6
0x00000000004010d6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
=> 0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)      ;Now we assummed that 15 is equal to eax,it had directly moved to this instruction.
   0x00000000004010dd <+98>:    cmp    $0xf,%edx	;15 is compared with the value of %edx, where edx = 15
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109> ;since 15 value is equal to the value of edx, so it moves to next instruction. From
								here we can concluded that first input digit 5 was correct beacause it has escaped the EXPLODE_BOMB.
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7ffffffedcb0      140737488280752
rbp            0x0                 0x0
rsp            0x7ffffffee300      0x7ffffffee300
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee410      140737488282640
r14            0x0                 0
r15            0x0                 0
rip            0x4010d6            0x4010d6 <phase_5+91>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d  0x7ffffffee300
0x7ffffffee300: 5

(gdb) u *0x00000000004010e2
0x00000000004010e2 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
=> 0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx  ;compared the value of 0x4(%rsp) and %ecx, where 0x4(%rsp) = 2 and ecx = 115
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114> ; Since 2 is not equal to 115, it executed the next instruction which EXPLODE_BOMB.
								 So, from here we concluded that the second value value is the value of ecx, where ecx = 115.
								
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) x/d  0x7ffffffee304
0x7ffffffee304: 2
(gdb) d
Delete all breakpoints? (y or n) y
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/Sonam Dema/Desktop/Assignment 1_2/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
48 4
So you got that one.  Try this one.
5 115 ;phase_5 output is 5 and 115.
Good work!  On to the next...



























































































