//opening a terminal in the bomb002 folder:

$ objdump -d bomb > bomb.s //changing the bomb.c file to bomb.s file
$ vim bomb.s //vim is used for reading the bomb.s file

//Again open another terminal in same folder
$ gdb bomb // open bomb in GNU debugger
$ chmod 777 bomb // Setting permission of file into readable, writeable and executable by all user.
 
Mirosoft Windows [Version 10.0.19042.1165]
(c) Microsoft Corporation. All rights reserved.
C:\Users\Sonam Dema\Desktop\Assignment 1\bomb002>bash
sd@DESKTOP-D37EAF4:/mnt/c/Users/Sonam Dema/Desktop/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...

//Creating breakpoint for phase_1 and explode_bomb to prevent the bomb to "BOOM" while the inputs is incorrect.
(gdb) break phase_1
Breakpoint 1 at 0x400e8d
(gdb) break explode_bomb
Breakpoint 2 at 0x401438
(gdb) run
Starting program: /mnt/c/Users/Sonam Dema/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
hi //try input

Breakpoint 1, 0x0000000000400e8d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
=> 0x0000000000400e8d <+0>:     sub    $0x8,%rsp 
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi //what is this being moved?
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal> //will compare input string with answer
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) ni // next instruction
0x0000000000400e91 in phase_1 ()
(gdb) ni
0x0000000000400e96 in phase_1 ()
(gdb) ni
0x0000000000400e9b in phase_1 ()
(gdb) disas //
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
=> 0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.

(gdb) i r
rax            0x1                 1
rbx            0x4021f0            4202992
rcx            0x2                 2
rdx            0x1                 1
rsi            0x4023cc            4203468
rdi            0x4023e9            4203497
rbp            0x0                 0x0
rsp            0x7ffffffee340      0x7ffffffee340
r8             0x6037a0            6305696
r9             0x0                 0
r10            0xfffffffffffff6ed  -2323
r11            0x7fffff5d7400      140737477702656
r12            0x400c60            4197472
r13            0x7ffffffee440      140737488282688
r14            0x0                 0
r15            0x0                 0
rip            0x400e9b            0x400e9b <phase_1+14>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x0000000000400e9d in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
=> 0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
   0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.
(gdb) ni
0x0000000000400e9f in phase_1 ()
(gdb) disas
Dump of assembler code for function phase_1:
   0x0000000000400e8d <+0>:     sub    $0x8,%rsp
   0x0000000000400e91 <+4>:     mov    $0x4023cc,%esi
   0x0000000000400e96 <+9>:     callq  0x401339 <strings_not_equal>
   0x0000000000400e9b <+14>:    test   %eax,%eax
   0x0000000000400e9d <+16>:    je     0x400ea4 <phase_1+23>
=> 0x0000000000400e9f <+18>:    callq  0x401438 <explode_bomb>
   0x0000000000400ea4 <+23>:    add    $0x8,%rsp
   0x0000000000400ea8 <+27>:    retq
End of assembler dump.

//lets examine  what is being moved from address 0x4023cc. We know it has to be a string of some sort so we use '/s'
(gdb) x/s 0x4023cc
0x4023cc:       "Public speaking is very easy."

// So this string is being moved into %esi,and it will passed into function <strings_not_equal>.

(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) break phase_2
Breakpoint 3 at 0x400ea9
(gdb) break explode_bomb
Breakpoint 4 at 0x401438
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/Sonam Dema/Desktop/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy. // the solution for phase_1
Phase 1 defused. How about the next one?





















































































































































































































































































































































































































































































